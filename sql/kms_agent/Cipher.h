// **********************************************************************
// This file was generated by a TARS parser!
// TARS version 3.0.13.
// **********************************************************************

#ifndef __CIPHER_H_
#define __CIPHER_H_

#include <map>
#include <string>
#include <vector>
#include "tup/Tars.h"
#include "tup/TarsJson.h"
using namespace std;
#include "servant/ServantProxy.h"
#include "servant/Servant.h"
#include "promise/promise.h"
#include "servant/Application.h"


namespace SR5000
{
    struct Ctx : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "SR5000.Ctx";
        }
        static string MD5()
        {
            return "325d87d477a8cf7a6468ed6bb39da964";
        }
        Ctx()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            ip = "";
            serverName = "";
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            if (ip != "")
            {
                _os.write(ip, 0);
            }
            if (serverName != "")
            {
                _os.write(serverName, 1);
            }
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(ip, 0, false);
            _is.read(serverName, 1, false);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["ip"] = tars::JsonOutput::writeJson(ip);
            p->value["serverName"] = tars::JsonOutput::writeJson(serverName);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(ip,pObj->value["ip"], false);
            tars::JsonInput::readJson(serverName,pObj->value["serverName"], false);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(ip,"ip");
            _ds.display(serverName,"serverName");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(ip, true);
            _ds.displaySimple(serverName, false);
            return _os;
        }
    public:
        std::string ip;
        std::string serverName;
    };
    inline bool operator==(const Ctx&l, const Ctx&r)
    {
        return l.ip == r.ip && l.serverName == r.serverName;
    }
    inline bool operator!=(const Ctx&l, const Ctx&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const Ctx&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,Ctx&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct SecretKeyInfo : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "SR5000.SecretKeyInfo";
        }
        static string MD5()
        {
            return "40c5ddd40e95a361d2576fa1cf33f953";
        }
        SecretKeyInfo()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            keyId = 0;
            content.clear();
            length = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(keyId, 0);
            _os.write(content, 1);
            _os.write(length, 2);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(keyId, 0, true);
            _is.read(content, 1, true);
            _is.read(length, 2, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["keyId"] = tars::JsonOutput::writeJson(keyId);
            p->value["content"] = tars::JsonOutput::writeJson(content);
            p->value["length"] = tars::JsonOutput::writeJson(length);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(keyId,pObj->value["keyId"], true);
            tars::JsonInput::readJson(content,pObj->value["content"], true);
            tars::JsonInput::readJson(length,pObj->value["length"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(keyId,"keyId");
            _ds.display(content,"content");
            _ds.display(length,"length");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(keyId, true);
            _ds.displaySimple(content, true);
            _ds.displaySimple(length, false);
            return _os;
        }
    public:
        tars::Int64 keyId;
        vector<tars::UInt8> content;
        tars::Int32 length;
    };
    inline bool operator==(const SecretKeyInfo&l, const SecretKeyInfo&r)
    {
        return l.keyId == r.keyId && l.content == r.content && l.length == r.length;
    }
    inline bool operator!=(const SecretKeyInfo&l, const SecretKeyInfo&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const SecretKeyInfo&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,SecretKeyInfo&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct GenerateSecretKeyReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "SR5000.GenerateSecretKeyReq";
        }
        static string MD5()
        {
            return "7b010a6336d210a506b1eb4bf4c1e014";
        }
        GenerateSecretKeyReq()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            length = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(length, 0);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(length, 0, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["length"] = tars::JsonOutput::writeJson(length);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(length,pObj->value["length"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(length,"length");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(length, false);
            return _os;
        }
    public:
        tars::Int32 length;
    };
    inline bool operator==(const GenerateSecretKeyReq&l, const GenerateSecretKeyReq&r)
    {
        return l.length == r.length;
    }
    inline bool operator!=(const GenerateSecretKeyReq&l, const GenerateSecretKeyReq&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const GenerateSecretKeyReq&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,GenerateSecretKeyReq&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct GenerateSecretKeyRsq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "SR5000.GenerateSecretKeyRsq";
        }
        static string MD5()
        {
            return "fe34b6c1fe14b217d18a0933074d4305";
        }
        GenerateSecretKeyRsq()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            secretKeyInfo.resetDefautlt();
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(secretKeyInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(secretKeyInfo, 0, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["secretKeyInfo"] = tars::JsonOutput::writeJson(secretKeyInfo);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(secretKeyInfo,pObj->value["secretKeyInfo"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(secretKeyInfo,"secretKeyInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(secretKeyInfo, false);
            return _os;
        }
    public:
        SR5000::SecretKeyInfo secretKeyInfo;
    };
    inline bool operator==(const GenerateSecretKeyRsq&l, const GenerateSecretKeyRsq&r)
    {
        return l.secretKeyInfo == r.secretKeyInfo;
    }
    inline bool operator!=(const GenerateSecretKeyRsq&l, const GenerateSecretKeyRsq&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const GenerateSecretKeyRsq&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,GenerateSecretKeyRsq&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct GetSecretKeyReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "SR5000.GetSecretKeyReq";
        }
        static string MD5()
        {
            return "7b010a6336d210a506b1eb4bf4c1e014";
        }
        GetSecretKeyReq()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            keyId = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(keyId, 0);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(keyId, 0, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["keyId"] = tars::JsonOutput::writeJson(keyId);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(keyId,pObj->value["keyId"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(keyId,"keyId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(keyId, false);
            return _os;
        }
    public:
        tars::Int32 keyId;
    };
    inline bool operator==(const GetSecretKeyReq&l, const GetSecretKeyReq&r)
    {
        return l.keyId == r.keyId;
    }
    inline bool operator!=(const GetSecretKeyReq&l, const GetSecretKeyReq&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const GetSecretKeyReq&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,GetSecretKeyReq&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct GetSecretKeyRsq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "SR5000.GetSecretKeyRsq";
        }
        static string MD5()
        {
            return "fe34b6c1fe14b217d18a0933074d4305";
        }
        GetSecretKeyRsq()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            secretKeyInfo.resetDefautlt();
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(secretKeyInfo, 0);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(secretKeyInfo, 0, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["secretKeyInfo"] = tars::JsonOutput::writeJson(secretKeyInfo);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(secretKeyInfo,pObj->value["secretKeyInfo"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(secretKeyInfo,"secretKeyInfo");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(secretKeyInfo, false);
            return _os;
        }
    public:
        SR5000::SecretKeyInfo secretKeyInfo;
    };
    inline bool operator==(const GetSecretKeyRsq&l, const GetSecretKeyRsq&r)
    {
        return l.secretKeyInfo == r.secretKeyInfo;
    }
    inline bool operator!=(const GetSecretKeyRsq&l, const GetSecretKeyRsq&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const GetSecretKeyRsq&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,GetSecretKeyRsq&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }

    struct DestroySecretKeyReq : public tars::TarsStructBase
    {
    public:
        static string className()
        {
            return "SR5000.DestroySecretKeyReq";
        }
        static string MD5()
        {
            return "7b010a6336d210a506b1eb4bf4c1e014";
        }
        DestroySecretKeyReq()
        {
            resetDefautlt();
        }
        void resetDefautlt()
        {
            keyId = 0;
        }
        template<typename WriterT>
        void writeTo(tars::TarsOutputStream<WriterT>& _os) const
        {
            _os.write(keyId, 0);
        }
        template<typename ReaderT>
        void readFrom(tars::TarsInputStream<ReaderT>& _is)
        {
            resetDefautlt();
            _is.read(keyId, 0, true);
        }
        tars::JsonValueObjPtr writeToJson() const
        {
            tars::JsonValueObjPtr p = new tars::JsonValueObj();
            p->value["keyId"] = tars::JsonOutput::writeJson(keyId);
            return p;
        }
        string writeToJsonString() const
        {
            return tars::TC_Json::writeValue(writeToJson());
        }
        void readFromJson(const tars::JsonValuePtr & p, bool isRequire = true)
        {
            resetDefautlt();
            if(NULL == p.get() || p->getType() != tars::eJsonTypeObj)
            {
                char s[128];
                snprintf(s, sizeof(s), "read 'struct' type mismatch, get type: %d.", (p.get() ? p->getType() : 0));
                throw tars::TC_Json_Exception(s);
            }
            tars::JsonValueObjPtr pObj=tars::JsonValueObjPtr::dynamicCast(p);
            tars::JsonInput::readJson(keyId,pObj->value["keyId"], true);
        }
        void readFromJsonString(const string & str)
        {
            readFromJson(tars::TC_Json::getValue(str));
        }
        ostream& display(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.display(keyId,"keyId");
            return _os;
        }
        ostream& displaySimple(ostream& _os, int _level=0) const
        {
            tars::TarsDisplayer _ds(_os, _level);
            _ds.displaySimple(keyId, false);
            return _os;
        }
    public:
        tars::Int32 keyId;
    };
    inline bool operator==(const DestroySecretKeyReq&l, const DestroySecretKeyReq&r)
    {
        return l.keyId == r.keyId;
    }
    inline bool operator!=(const DestroySecretKeyReq&l, const DestroySecretKeyReq&r)
    {
        return !(l == r);
    }
    inline ostream& operator<<(ostream & os,const DestroySecretKeyReq&r)
    {
        os << r.writeToJsonString();
        return os;
    }
    inline istream& operator>>(istream& is,DestroySecretKeyReq&l)
    {
        std::istreambuf_iterator<char> eos;
        std::string s(std::istreambuf_iterator<char>(is), eos);
        l.readFromJsonString(s);
        return is;
    }


    /* callback of async proxy for client */
    class CipherPrxCallback: public tars::ServantProxyCallback
    {
    public:
        virtual ~CipherPrxCallback(){}
        virtual void callback_DestroySecretKey(tars::Int32 ret)
        { throw std::runtime_error("callback_DestroySecretKey() override incorrect."); }
        virtual void callback_DestroySecretKey_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_DestroySecretKey_exception() override incorrect."); }

        virtual void callback_GenerateSecretKey(tars::Int32 ret,  const SR5000::GenerateSecretKeyRsq& rsp)
        { throw std::runtime_error("callback_GenerateSecretKey() override incorrect."); }
        virtual void callback_GenerateSecretKey_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_GenerateSecretKey_exception() override incorrect."); }
        virtual void callback_GenerateSecretKey(tars::Int32 ret, SR5000::GenerateSecretKeyRsq&&  rsp)
        { callback_GenerateSecretKey(ret, rsp); }

        virtual void callback_GetSecretKey(tars::Int32 ret,  const SR5000::GetSecretKeyRsq& rsp)
        { throw std::runtime_error("callback_GetSecretKey() override incorrect."); }
        virtual void callback_GetSecretKey_exception(tars::Int32 ret)
        { throw std::runtime_error("callback_GetSecretKey_exception() override incorrect."); }
        virtual void callback_GetSecretKey(tars::Int32 ret, SR5000::GetSecretKeyRsq&&  rsp)
        { callback_GetSecretKey(ret, rsp); }

    public:
        virtual const map<std::string, std::string> & getResponseContext() const
        {
            CallbackThreadData * pCbtd = CallbackThreadData::getData();
            assert(pCbtd != NULL);

            if(!pCbtd->getContextValid())
            {
                throw TC_Exception("cann't get response context");
            }
            return pCbtd->getResponseContext();
        }

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Cipher_all[]=
            {
                "DestroySecretKey",
                "GenerateSecretKey",
                "GetSecretKey"
            };
            auto it = _msg_->response->status.find("TARS_FUNC");
            pair<string*, string*> r = equal_range(__Cipher_all, __Cipher_all+3, (it==_msg_->response->status.end())?_msg_->request.sFuncName:it->second);
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Cipher_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_DestroySecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "DestroySecretKey", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_DestroySecretKey(_ret);

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GenerateSecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    SR5000::GenerateSecretKeyRsq rsp;
                    _is.read(rsp, 3, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "GenerateSecretKey", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_GenerateSecretKey(_ret, std::move(rsp));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GetSecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    tars::Int32 _ret;
                    _is.read(_ret, 0, true);

                    SR5000::GetSecretKeyRsq rsp;
                    _is.read(rsp, 3, true);
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                            _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "GetSecretKey", 0, _trace_param_, "");
                    }

                    CallbackThreadData * pCbtd = CallbackThreadData::getData();
                    assert(pCbtd != NULL);

                    pCbtd->setResponseContext(_msg_->response->context);

                    callback_GetSecretKey(_ret, std::move(rsp));

                    pCbtd->delResponseContext();

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<CipherPrxCallback> CipherPrxCallbackPtr;

    //callback of promise async proxy for client
    class CipherPrxCallbackPromise: public tars::ServantProxyCallback
    {
    public:
        virtual ~CipherPrxCallbackPromise(){}
    public:
        struct PromiseDestroySecretKey: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< CipherPrxCallbackPromise::PromiseDestroySecretKey > PromiseDestroySecretKeyPtr;

        CipherPrxCallbackPromise(const tars::Promise< CipherPrxCallbackPromise::PromiseDestroySecretKeyPtr > &promise)
        : _promise_DestroySecretKey(promise)
        {}
        
        virtual void callback_DestroySecretKey(const CipherPrxCallbackPromise::PromiseDestroySecretKeyPtr &ptr)
        {
            _promise_DestroySecretKey.setValue(ptr);
        }
        virtual void callback_DestroySecretKey_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:DestroySecretKey_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_DestroySecretKey.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< CipherPrxCallbackPromise::PromiseDestroySecretKeyPtr > _promise_DestroySecretKey;

    public:
        struct PromiseGenerateSecretKey: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            SR5000::GenerateSecretKeyRsq rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< CipherPrxCallbackPromise::PromiseGenerateSecretKey > PromiseGenerateSecretKeyPtr;

        CipherPrxCallbackPromise(const tars::Promise< CipherPrxCallbackPromise::PromiseGenerateSecretKeyPtr > &promise)
        : _promise_GenerateSecretKey(promise)
        {}
        
        virtual void callback_GenerateSecretKey(const CipherPrxCallbackPromise::PromiseGenerateSecretKeyPtr &ptr)
        {
            _promise_GenerateSecretKey.setValue(ptr);
        }
        virtual void callback_GenerateSecretKey_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:GenerateSecretKey_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_GenerateSecretKey.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< CipherPrxCallbackPromise::PromiseGenerateSecretKeyPtr > _promise_GenerateSecretKey;

    public:
        struct PromiseGetSecretKey: virtual public TC_HandleBase
        {
        public:
            tars::Int32 _ret;
            SR5000::GetSecretKeyRsq rsp;
            map<std::string, std::string> _mRspContext;
        };
        
        typedef tars::TC_AutoPtr< CipherPrxCallbackPromise::PromiseGetSecretKey > PromiseGetSecretKeyPtr;

        CipherPrxCallbackPromise(const tars::Promise< CipherPrxCallbackPromise::PromiseGetSecretKeyPtr > &promise)
        : _promise_GetSecretKey(promise)
        {}
        
        virtual void callback_GetSecretKey(const CipherPrxCallbackPromise::PromiseGetSecretKeyPtr &ptr)
        {
            _promise_GetSecretKey.setValue(ptr);
        }
        virtual void callback_GetSecretKey_exception(tars::Int32 ret)
        {
            std::string str("");
            str += "Function:GetSecretKey_exception|Ret:";
            str += TC_Common::tostr(ret);
            _promise_GetSecretKey.setException(tars::copyException(str, ret));
        }

    protected:
        tars::Promise< CipherPrxCallbackPromise::PromiseGetSecretKeyPtr > _promise_GetSecretKey;

    public:
        virtual int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Cipher_all[]=
            {
                "DestroySecretKey",
                "GenerateSecretKey",
                "GetSecretKey"
            };

            pair<string*, string*> r = equal_range(__Cipher_all, __Cipher_all+3, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Cipher_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_DestroySecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    CipherPrxCallbackPromise::PromiseDestroySecretKeyPtr ptr = new CipherPrxCallbackPromise::PromiseDestroySecretKey();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                    }
                    catch(std::exception &ex)
                    {
                        callback_DestroySecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_DestroySecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_DestroySecretKey(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GenerateSecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    CipherPrxCallbackPromise::PromiseGenerateSecretKeyPtr ptr = new CipherPrxCallbackPromise::PromiseGenerateSecretKey();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rsp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_GenerateSecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_GenerateSecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_GenerateSecretKey(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GetSecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);

                    CipherPrxCallbackPromise::PromiseGetSecretKeyPtr ptr = new CipherPrxCallbackPromise::PromiseGetSecretKey();

                    try
                    {
                        _is.read(ptr->_ret, 0, true);

                        _is.read(ptr->rsp, 3, true);
                    }
                    catch(std::exception &ex)
                    {
                        callback_GetSecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_GetSecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    ptr->_mRspContext = _msg_->response->context;

                    callback_GetSecretKey(ptr);

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    };
    typedef tars::TC_AutoPtr<CipherPrxCallbackPromise> CipherPrxCallbackPromisePtr;

    /* callback of coroutine async proxy for client */
    class CipherCoroPrxCallback: public CipherPrxCallback
    {
    public:
        virtual ~CipherCoroPrxCallback(){}
    public:
        virtual const map<std::string, std::string> & getResponseContext() const { return _mRspContext; }

        virtual void setResponseContext(const map<std::string, std::string> &mContext) { _mRspContext = mContext; }

    public:
        int onDispatch(tars::ReqMessagePtr _msg_)
        {
            static ::std::string __Cipher_all[]=
            {
                "DestroySecretKey",
                "GenerateSecretKey",
                "GetSecretKey"
            };

            pair<string*, string*> r = equal_range(__Cipher_all, __Cipher_all+3, string(_msg_->request.sFuncName));
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __Cipher_all)
            {
                case 0:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_DestroySecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        setResponseContext(_msg_->response->context);

                        callback_DestroySecretKey(_ret);

                    }
                    catch(std::exception &ex)
                    {
                        callback_DestroySecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_DestroySecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GenerateSecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        SR5000::GenerateSecretKeyRsq rsp;
                        _is.read(rsp, 3, true);
                        setResponseContext(_msg_->response->context);

                        callback_GenerateSecretKey(_ret, std::move(rsp));

                    }
                    catch(std::exception &ex)
                    {
                        callback_GenerateSecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_GenerateSecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    if (_msg_->response->iRet != tars::TARSSERVERSUCCESS)
                    {
                        callback_GetSecretKey_exception(_msg_->response->iRet);

                        return _msg_->response->iRet;
                    }
                    tars::TarsInputStream<tars::BufferReader> _is;

                    _is.setBuffer(_msg_->response->sBuffer);
                    try
                    {
                        tars::Int32 _ret;
                        _is.read(_ret, 0, true);

                        SR5000::GetSecretKeyRsq rsp;
                        _is.read(rsp, 3, true);
                        setResponseContext(_msg_->response->context);

                        callback_GetSecretKey(_ret, std::move(rsp));

                    }
                    catch(std::exception &ex)
                    {
                        callback_GetSecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }
                    catch(...)
                    {
                        callback_GetSecretKey_exception(tars::TARSCLIENTDECODEERR);

                        return tars::TARSCLIENTDECODEERR;
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }

    protected:
        map<std::string, std::string> _mRspContext;
    };
    typedef tars::TC_AutoPtr<CipherCoroPrxCallback> CipherCoroPrxCallbackPtr;

    /* proxy for client */
    class CipherProxy : public tars::ServantProxy
    {
    public:
        typedef map<string, string> TARS_CONTEXT;
        tars::Int32 DestroySecretKey(const SR5000::Ctx & ctx,const SR5000::DestroySecretKeyReq & req,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "DestroySecretKey", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"DestroySecretKey", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "DestroySecretKey", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_DestroySecretKey(CipherPrxCallbackPtr callback,const SR5000::Ctx &ctx,const SR5000::DestroySecretKeyReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "DestroySecretKey", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"DestroySecretKey", _os, context, _mStatus, callback);
        }
        
        tars::Future< CipherPrxCallbackPromise::PromiseDestroySecretKeyPtr > promise_async_DestroySecretKey(const SR5000::Ctx &ctx,const SR5000::DestroySecretKeyReq &req,const map<string, string>& context)
        {
            tars::Promise< CipherPrxCallbackPromise::PromiseDestroySecretKeyPtr > promise;
            CipherPrxCallbackPromisePtr callback = new CipherPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"DestroySecretKey", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_DestroySecretKey(CipherCoroPrxCallbackPtr callback,const SR5000::Ctx &ctx,const SR5000::DestroySecretKeyReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"DestroySecretKey", _os, context, _mStatus, callback, true);
        }

        tars::Int32 GenerateSecretKey(const SR5000::Ctx & ctx,const SR5000::GenerateSecretKeyReq & req,SR5000::GenerateSecretKeyRsq &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            _os.write(rsp, 3);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "GenerateSecretKey", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"GenerateSecretKey", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rsp, 3, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "GenerateSecretKey", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_GenerateSecretKey(CipherPrxCallbackPtr callback,const SR5000::Ctx &ctx,const SR5000::GenerateSecretKeyReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "GenerateSecretKey", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"GenerateSecretKey", _os, context, _mStatus, callback);
        }
        
        tars::Future< CipherPrxCallbackPromise::PromiseGenerateSecretKeyPtr > promise_async_GenerateSecretKey(const SR5000::Ctx &ctx,const SR5000::GenerateSecretKeyReq &req,const map<string, string>& context)
        {
            tars::Promise< CipherPrxCallbackPromise::PromiseGenerateSecretKeyPtr > promise;
            CipherPrxCallbackPromisePtr callback = new CipherPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"GenerateSecretKey", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_GenerateSecretKey(CipherCoroPrxCallbackPtr callback,const SR5000::Ctx &ctx,const SR5000::GenerateSecretKeyReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"GenerateSecretKey", _os, context, _mStatus, callback, true);
        }

        tars::Int32 GetSecretKey(const SR5000::Ctx & ctx,const SR5000::GetSecretKeyReq & req,SR5000::GetSecretKeyRsq &rsp,const map<string, string> &context = TARS_CONTEXT(),map<string, string> * pResponseContext = NULL)
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            _os.write(rsp, 3);
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "GetSecretKey", 0, _trace_param_, "");
            }

            std::map<string, string> _mStatus;
            shared_ptr<tars::ResponsePacket> rep = tars_invoke(tars::TARSNORMAL,"GetSecretKey", _os, context, _mStatus);
            if(pResponseContext)
            {
                pResponseContext->swap(rep->context);
            }

            tars::TarsInputStream<tars::BufferReader> _is;
            _is.setBuffer(rep->sBuffer);
            tars::Int32 _ret;
            _is.read(_ret, 0, true);
            _is.read(rsp, 3, true);
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CR, _is.size());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CR), TRACE_ANNOTATION_CR, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "GetSecretKey", 0, _trace_param_, "");
            }

            return _ret;
        }

        void async_GetSecretKey(CipherPrxCallbackPtr callback,const SR5000::Ctx &ctx,const SR5000::GetSecretKeyReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
            if (_pSptd_ && _pSptd_->_traceCall)
            {
                _pSptd_->newSpan();
                string _trace_param_;
                int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_CS, _os.getLength());
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                    _p_->value["req"] = tars::JsonOutput::writeJson(req);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_CS), TRACE_ANNOTATION_CS, ServerConfig::Application + "." + ServerConfig::ServerName, tars_name(), "GetSecretKey", 0, _trace_param_, "");
            }
            tars_invoke_async(tars::TARSNORMAL,"GetSecretKey", _os, context, _mStatus, callback);
        }
        
        tars::Future< CipherPrxCallbackPromise::PromiseGetSecretKeyPtr > promise_async_GetSecretKey(const SR5000::Ctx &ctx,const SR5000::GetSecretKeyReq &req,const map<string, string>& context)
        {
            tars::Promise< CipherPrxCallbackPromise::PromiseGetSecretKeyPtr > promise;
            CipherPrxCallbackPromisePtr callback = new CipherPrxCallbackPromise(promise);

            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"GetSecretKey", _os, context, _mStatus, callback);

            return promise.getFuture();
        }

        void coro_GetSecretKey(CipherCoroPrxCallbackPtr callback,const SR5000::Ctx &ctx,const SR5000::GetSecretKeyReq &req,const map<string, string>& context = TARS_CONTEXT())
        {
            tars::TarsOutputStream<tars::BufferWriterVector> _os;
            _os.write(ctx, 1);
            _os.write(req, 2);
            std::map<string, string> _mStatus;
            tars_invoke_async(tars::TARSNORMAL,"GetSecretKey", _os, context, _mStatus, callback, true);
        }

        CipherProxy* tars_hash(uint32_t key)
        {
            return (CipherProxy*)ServantProxy::tars_hash(key);
        }

        CipherProxy* tars_consistent_hash(uint32_t key)
        {
            return (CipherProxy*)ServantProxy::tars_consistent_hash(key);
        }

        CipherProxy* tars_open_trace(bool traceParam = false)
        {
            return (CipherProxy*)ServantProxy::tars_open_trace(traceParam);
        }

        CipherProxy* tars_set_timeout(int msecond)
        {
            return (CipherProxy*)ServantProxy::tars_set_timeout(msecond);
        }

        static const char* tars_prxname() { return "CipherProxy"; }
    };
    typedef tars::TC_AutoPtr<CipherProxy> CipherPrx;

    /* servant for server */
    class Cipher : public tars::Servant
    {
    public:
        virtual ~Cipher(){}
        virtual tars::Int32 DestroySecretKey(const SR5000::Ctx & ctx,const SR5000::DestroySecretKeyReq & req,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 DestroySecretKey(SR5000::Ctx && ctx,SR5000::DestroySecretKeyReq && req,tars::TarsCurrentPtr _current_) 
        { return DestroySecretKey(ctx, req, _current_); }
        static void async_response_DestroySecretKey(tars::TarsCurrentPtr _current_, tars::Int32 _ret)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "DestroySecretKey", 0, _trace_param_, "");
            }

        }
        static void async_response_push_DestroySecretKey(tars::CurrentPtr _current_, tars::Int32 _ret, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"DestroySecretKey", _os, _context);
            }
        }

        virtual tars::Int32 GenerateSecretKey(const SR5000::Ctx & ctx,const SR5000::GenerateSecretKeyReq & req,SR5000::GenerateSecretKeyRsq &rsp,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 GenerateSecretKey(SR5000::Ctx && ctx,SR5000::GenerateSecretKeyReq && req,SR5000::GenerateSecretKeyRsq &rsp,tars::TarsCurrentPtr _current_) 
        { return GenerateSecretKey(ctx, req, rsp, _current_); }
        static void async_response_GenerateSecretKey(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const SR5000::GenerateSecretKeyRsq &rsp)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 3);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "GenerateSecretKey", 0, _trace_param_, "");
            }

        }
        static void async_response_push_GenerateSecretKey(tars::CurrentPtr _current_, tars::Int32 _ret, const SR5000::GenerateSecretKeyRsq &rsp, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 3);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"GenerateSecretKey", _os, _context);
            }
        }

        virtual tars::Int32 GetSecretKey(const SR5000::Ctx & ctx,const SR5000::GetSecretKeyReq & req,SR5000::GetSecretKeyRsq &rsp,tars::TarsCurrentPtr _current_) = 0;
        virtual tars::Int32 GetSecretKey(SR5000::Ctx && ctx,SR5000::GetSecretKeyReq && req,SR5000::GetSecretKeyRsq &rsp,tars::TarsCurrentPtr _current_) 
        { return GetSecretKey(ctx, req, rsp, _current_); }
        static void async_response_GetSecretKey(tars::TarsCurrentPtr _current_, tars::Int32 _ret, const SR5000::GetSecretKeyRsq &rsp)
        {
            size_t _rsp_len_ = 0;
            if (_current_->getRequestVersion() == TUPVERSION )
            {
                UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                _tarsAttr_.setVersion(_current_->getRequestVersion());
                _tarsAttr_.put("", _ret);
                _tarsAttr_.put("tars_ret", _ret);
                _tarsAttr_.put("rsp", rsp);

                vector<char> sTupResponseBuffer;
                _tarsAttr_.encode(sTupResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sTupResponseBuffer);
                _rsp_len_ = sTupResponseBuffer.size();
            }
            else if (_current_->getRequestVersion() == JSONVERSION)
            {
                tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                _p->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                vector<char> sJsonResponseBuffer;
                tars::TC_Json::writeValue(_p, sJsonResponseBuffer);
                _current_->sendResponse(tars::TARSSERVERSUCCESS, sJsonResponseBuffer);
                _rsp_len_ = sJsonResponseBuffer.size();
            }
            else
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 3);

                _rsp_len_ = _os.getLength();
                _current_->sendResponse(tars::TARSSERVERSUCCESS, _os);
            }
            if (_current_->isTraced())
            {
                string _trace_param_;
                int _trace_param_flag_ = ServantProxyThreadData::needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _current_->getTraceKey(), _rsp_len_);
                if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                {
                    tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                    _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                    _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                    _trace_param_ = tars::TC_Json::writeValue(_p_);
                }
                else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                {
                    _trace_param_ = "{\"trace_param_over_max_len\":true}";
                }
                TARS_TRACE(_current_->getTraceKey(), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "GetSecretKey", 0, _trace_param_, "");
            }

        }
        static void async_response_push_GetSecretKey(tars::CurrentPtr _current_, tars::Int32 _ret, const SR5000::GetSecretKeyRsq &rsp, const map<string, string> &_context = tars::Current::TARS_STATUS())
        {
            {
                tars::TarsOutputStream<tars::BufferWriterVector> _os;
                _os.write(_ret, 0);

                _os.write(rsp, 3);

                _current_->sendPushResponse( tars::TARSSERVERSUCCESS ,"GetSecretKey", _os, _context);
            }
        }

    public:
        int onDispatch(tars::TarsCurrentPtr _current, vector<char> &_sResponseBuffer)
        {
            static ::std::string __SR5000__Cipher_all[]=
            {
                "DestroySecretKey",
                "GenerateSecretKey",
                "GetSecretKey"
            };

            pair<string*, string*> r = equal_range(__SR5000__Cipher_all, __SR5000__Cipher_all+3, _current->getFuncName());
            if(r.first == r.second) return tars::TARSSERVERNOFUNCERR;
            switch(r.first - __SR5000__Cipher_all)
            {
                case 0:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    SR5000::Ctx ctx;
                    SR5000::DestroySecretKeyReq req;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("ctx", ctx);
                        _tarsAttr_.get("req", req);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(ctx, _jsonPtr->value["ctx"], true);
                        tars::JsonInput::readJson(req, _jsonPtr->value["req"], true);
                    }
                    else
                    {
                        _is.read(ctx, 1, true);
                        _is.read(req, 2, true);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                            _p_->value["req"] = tars::JsonOutput::writeJson(req);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "DestroySecretKey", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = DestroySecretKey(std::move(ctx),std::move(req), _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "DestroySecretKey", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 1:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    SR5000::Ctx ctx;
                    SR5000::GenerateSecretKeyReq req;
                    SR5000::GenerateSecretKeyRsq rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("ctx", ctx);
                        _tarsAttr_.get("req", req);
                        _tarsAttr_.getByDefault("rsp", rsp, rsp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(ctx, _jsonPtr->value["ctx"], true);
                        tars::JsonInput::readJson(req, _jsonPtr->value["req"], true);
                        tars::JsonInput::readJson(rsp, _jsonPtr->value["rsp"], false);
                    }
                    else
                    {
                        _is.read(ctx, 1, true);
                        _is.read(req, 2, true);
                        _is.read(rsp, 3, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                            _p_->value["req"] = tars::JsonOutput::writeJson(req);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "GenerateSecretKey", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = GenerateSecretKey(std::move(ctx),std::move(req),rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("rsp", rsp);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(rsp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "GenerateSecretKey", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
                case 2:
                {
                    tars::TarsInputStream<tars::BufferReader> _is;
                    _is.setBuffer(_current->getRequestBuffer());
                    SR5000::Ctx ctx;
                    SR5000::GetSecretKeyReq req;
                    SR5000::GetSecretKeyRsq rsp;
                    if (_current->getRequestVersion() == TUPVERSION)
                    {
                        UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                        _tarsAttr_.setVersion(_current->getRequestVersion());
                        _tarsAttr_.decode(_current->getRequestBuffer());
                        _tarsAttr_.get("ctx", ctx);
                        _tarsAttr_.get("req", req);
                        _tarsAttr_.getByDefault("rsp", rsp, rsp);
                    }
                    else if (_current->getRequestVersion() == JSONVERSION)
                    {
                        tars::JsonValueObjPtr _jsonPtr = tars::JsonValueObjPtr::dynamicCast(tars::TC_Json::getValue(_current->getRequestBuffer()));
                        tars::JsonInput::readJson(ctx, _jsonPtr->value["ctx"], true);
                        tars::JsonInput::readJson(req, _jsonPtr->value["req"], true);
                        tars::JsonInput::readJson(rsp, _jsonPtr->value["rsp"], false);
                    }
                    else
                    {
                        _is.read(ctx, 1, true);
                        _is.read(req, 2, true);
                        _is.read(rsp, 3, false);
                    }
                    ServantProxyThreadData *_pSptd_ = ServantProxyThreadData::getData();
                    if (_pSptd_ && _pSptd_->_traceCall)
                    {
                        string _trace_param_;
                        int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SR, _is.size());
                        if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                        {
                            tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                            _p_->value["ctx"] = tars::JsonOutput::writeJson(ctx);
                            _p_->value["req"] = tars::JsonOutput::writeJson(req);
                            _trace_param_ = tars::TC_Json::writeValue(_p_);
                        }
                        else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                        {
                            _trace_param_ = "{\"trace_param_over_max_len\":true}";
                        }
                        TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SR), TRACE_ANNOTATION_SR, "", ServerConfig::Application + "." + ServerConfig::ServerName, "GetSecretKey", 0, _trace_param_, "");
                    }

                    tars::Int32 _ret = GetSecretKey(std::move(ctx),std::move(req),rsp, _current);
                    if(_current->isResponse())
                    {
                        if (_current->getRequestVersion() == TUPVERSION)
                        {
                            UniAttribute<tars::BufferWriterVector, tars::BufferReader>  _tarsAttr_;
                            _tarsAttr_.setVersion(_current->getRequestVersion());
                            _tarsAttr_.put("", _ret);
                            _tarsAttr_.put("tars_ret", _ret);
                            _tarsAttr_.put("rsp", rsp);
                            _tarsAttr_.encode(_sResponseBuffer);
                        }
                        else if (_current->getRequestVersion() == JSONVERSION)
                        {
                            tars::JsonValueObjPtr _p = new tars::JsonValueObj();
                            _p->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                            _p->value["tars_ret"] = tars::JsonOutput::writeJson(_ret);
                            tars::TC_Json::writeValue(_p, _sResponseBuffer);
                        }
                        else
                        {
                            tars::TarsOutputStream<tars::BufferWriterVector> _os;
                            _os.write(_ret, 0);
                            _os.write(rsp, 3);
                            _os.swap(_sResponseBuffer);
                        }
                        if (_pSptd_ && _pSptd_->_traceCall)
                        {
                            string _trace_param_;
                            int _trace_param_flag_ = _pSptd_->needTraceParam(ServantProxyThreadData::TraceContext::EST_SS, _sResponseBuffer.size());
                            if (ServantProxyThreadData::TraceContext::ENP_NORMAL == _trace_param_flag_)
                            {
                                tars::JsonValueObjPtr _p_ = new tars::JsonValueObj();
                                _p_->value[""] = tars::JsonOutput::writeJson(_ret);
                                _p_->value["rsp"] = tars::JsonOutput::writeJson(rsp);
                                _trace_param_ = tars::TC_Json::writeValue(_p_);
                            }
                            else if(ServantProxyThreadData::TraceContext::ENP_OVERMAXLEN == _trace_param_flag_)
                            {
                                _trace_param_ = "{\"trace_param_over_max_len\":true}";
                            }
                            TARS_TRACE(_pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS), TRACE_ANNOTATION_SS, "", ServerConfig::Application + "." + ServerConfig::ServerName, "GetSecretKey", 0, _trace_param_, "");
                        }

                    }
                    else if(_pSptd_ && _pSptd_->_traceCall)
                    {
                        _current->setTrace(_pSptd_->_traceCall, _pSptd_->getTraceKey(ServantProxyThreadData::TraceContext::EST_SS));
                    }

                    return tars::TARSSERVERSUCCESS;

                }
            }
            return tars::TARSSERVERNOFUNCERR;
        }
    };


}



#endif
